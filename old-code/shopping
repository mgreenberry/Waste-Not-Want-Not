{% extends "base.html" %}
{% block content %}

    <h3 class="light-green-text text-darken-4 center-align">Food List</h3>
    <h5 class="light-green-text text-darken-4 center-align">Use By Dates</h5>

    <div class="row">
        <div class="col s12 center-align">
            <a type="submit" class="btn-large light-green darken-1 text-shadow" href="#">
                Shopping List <i class="fas fa-plus-square right"></i>
            </a> 
        </div>
    </div>

    <ul class="collapsible">
        {% for item in items %}
        {% if session.user|lower == item.created_by|lower %}
        <li>
            <div class="collapsible-header white-text green darken-4 text-shadow">
                <div class="col s12">
                    {% if item.short_date == "on" %}
                        <span class="fas fa-exclamation-circle white-text" data-position="right"> SHORT DATE!</span>
                    {% endif %}
                    <h4 class="uppercase">Food: {{ item.food_name}}</h4>
                    <p><span class="uppercase">Use By Date: {{ item.use_by_date }}</span></p>
                    
                        <a href="#" class="btn-small green accent-4 right">Eaten</a>
                        <a href="#" class="btn-small red lighten-1 right">Thrown Away</a>
                    <br>
                    <i class="fas fa-caret-down"></i>
                </div>
            </div>
            <div class="collapsible-body uppercase">
                <!-- Modal Trigger -->
                <a href="#modal1" class="btn-small red modal-trigger">Delete</a>
                <!-- Modal Structure -->
                <div id="modal1" class="modal">
                    <div class="modal-content">
                        <h4>Are You Sure?</h4>
                        <p>To delete food item click 'Delete' below or click 'Cancel' to go back</p>
                    </div>
                    <div class="modal-footer">
                        <a href="#" 
                            class="modal-close btn-small blue lighten-1">
                            Delete
                        </a>
                        <a href="#" class="modal-close left btn-small red text-shadow">
                            Cancel <i class="fas fa-times-circle"></i>
                        </a>
                    </div>
                </div>
                <a href="#" class="btn-small blue">Edit</a>
            </div>
        </li>
        {% endif %}
        {% endfor %}
    </ul>

{% endblock %}

This for Modifies: -
{% extends "base.html" %}
{% block content %}

    <h3 class="light-green-text text-darken-4 center-align">Food List</h3>
    <h5 class="light-green-text text-darken-4 center-align">Use By Dates</h5>

    <div class="row">
        <div class="col s12 center-align">
            <a type="submit" class="btn-large light-green darken-1 text-shadow" href="{{ url_for('add_food') }}">
                Add Food Item <i class="fas fa-plus-square right"></i>
            </a> 
        </div>
    </div>

    <ul class="collapsible">
        {% for modify in modifies %}
        {% if session.user|lower == modify.created_by|lower %}
        <li>
            <div class="collapsible-header white-text green darken-4 text-shadow">
                <div class="col s12">
                    {% if modify.short_date == "on" %}
                        <span class="fas fa-exclamation-circle white-text" data-position="right"> SHORT DATE!</span>
                    {% endif %}
                    <h4 class="uppercase">Food: {{ modify.food_name}}</h4>
                    <p><span class="uppercase">Use By Date: {{ modify.use_by_date }}</span></p>
                        <a href="{{ url_for('shopping', food_name=modify.food_name ) }}" class="btn-small green accent-4 right">Eaten</a>
                        <a href="#" class="btn-small red lighten-1 right">Thrown Away</a>
                    <br>
                    <i class="fas fa-caret-down"></i>
                </div>
            </div>
            <div class="collapsible-body uppercase">
                <strong>Location: {{ modify.location }}</strong>
                <p>Barcode or ID number: {{ modify.barcode }}</p>
                <p>Date of Purchase: {{ modify.purchase_date }}</p>
                <p><em>Created by: {{ modify.created_by }}</em></p>
                <!-- Modal Trigger -->
                <a href="#modal1" class="btn-small red modal-trigger">Delete</a>
                <!-- Modal Structure -->
                <div id="modal1" class="modal">
                    <div class="modal-content">
                        <h4>Are You Sure?</h4>
                        <p>To delete food item click 'Delete' below or click 'Cancel' to go back</p>
                    </div>
                    <div class="modal-footer">
                        <a href="{{ url_for('delete_food', food_name=modify._id) }}" 
                            class="modal-close btn-small blue lighten-1">
                            Delete
                        </a>
                        <a href="{{ url_for('modifies') }}" class="modal-close left btn-small red text-shadow">
                            Cancel <i class="fas fa-times-circle"></i>
                        </a>
                    </div>
                </div>
                <a href="{{ url_for('edit_food', food_name=modify._id) }}" class="btn-small blue">Edit</a>
            </div>
        </li>
        {% endif %}
        {% endfor %}
    </ul>

{% endblock %}

This for app. py
import os
from flask import (
    Flask, flash, render_template,
    redirect, request, session, url_for)
from flask_pymongo import PyMongo
from bson.objectid import ObjectId
from werkzeug.security import generate_password_hash, check_password_hash
if os.path.exists("env.py"):
    import env


app = Flask(__name__)

app.config["MONGO_DBNAME"] = os.environ.get("MONGO_DBNAME")
app.config["MONGO_URI"] = os.environ.get("MONGO_URI")
app.secret_key = os.environ.get("SECRET_KEY")

mongo = PyMongo(app)


@app.route("/")
@app.route("/index")
def index():
    foods = mongo.db.food.find()
    return render_template("index.html", foods=foods)


@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        # check if username already exists in db
        existing_user = mongo.db.users.find_one(
            {"username": request.form.get("username").lower()})

        if existing_user:
            flash("Username already exists")
            return redirect(url_for("register"))

        register = {
            "username": request.form.get("username").lower(),
            "password": generate_password_hash(request.form.get("password"))
        }
        mongo.db.users.insert_one(register)

        # put the new user into 'session' cookie
        session["user"] = request.form.get("username").lower()
        flash("Registration Successful!")
        return redirect(url_for("profile", username=session["user"]))

    return render_template("register.html")


@app.route("/index", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        # check if username exists in db
        existing_user = mongo.db.users.find_one(
            {"username": request.form.get("username").lower()})

        if existing_user:
            # ensure hashed password matches user input
            if check_password_hash(
                    existing_user["password"], request.form.get("password")):
                        session["user"] = request.form.get("username").lower()
                        flash("Welcome, {}".format(
                            request.form.get("username")))
                        return redirect(url_for(
                            "modifies", username=session["user"]))
            else:
                # invalid password match
                flash("Incorrect Username and/or Password")
                return redirect(url_for("index"))

        else:
            # username doesn't exist
            flash("Incorrect Username and/or Password")
            return redirect(url_for("index"))

    return render_template("profile.html")


@app.route("/profile/<username>", methods=["GET", "POST"])
def profile(username):
    username = mongo.db.users.find_one(
        {"username": session["user"]})["username"]
    return render_template("profile.html", username=username)


@app.route("/logout")
def logout():
    # Logs user out
    flash("You have logged out")
    session.pop("user")
    return redirect(url_for("index"))


@app.route("/add_food", methods=["GET", "POST"])
def add_food():
    if request.method == "POST":
        short_date = "on" if request.form.get("short_date") else "off"
        food = {
            "location": request.form.get("location"),
            "food_name": request.form.get("food_name"),
            "barcode": request.form.get("barcode"),
            "purchase_date": request.form.get("purchase_date"),
            "use_by_date": request.form.get("use_by_date"),
            "short_date": short_date,
            "created_by": session["user"]
        }
        mongo.db.food.insert_one(food)
        flash("Food added succesfully")
        return redirect(url_for("modifies"))

    foods = mongo.db.food.find().sort("food_name", 1)
    return render_template("add_food.html", foods=foods)


@app.route("/edit_food/<food_name>", methods=["GET", "POST"])
def edit_food(food_name):

    if request.method == "POST":
        short_date = "on" if request.form.get("short_date") else "off"
        submit = {
            "location": request.form.get("location"),
            "food_name": request.form.get("food_name"),
            "barcode": request.form.get("barcode"),
            "purchase_date": request.form.get("purchase_date"),
            "use_by_date": request.form.get("use_by_date"),
            "short_date": short_date,
            "created_by": session["user"]
        }
        mongo.db.food.update({"_id": ObjectId(food_name)}, submit)
        flash("Food updated succesfully")
        return redirect(url_for("modifies"))

    food = mongo.db.food.find_one({"_id": ObjectId(food_name)})
    foods = mongo.db.food.find().sort("food_name", 1)
    return render_template("edit_food.html", food=food, foods=foods)


@app.route("/delete_food/<food_name>")
def delete_food(food_name):
    mongo.db.food.remove({"_id": ObjectId(food_name)})
    flash("Food Item Deleted")
    return redirect(url_for("modifies"))


@app.route("/modifies")
def modifies():
    modifies = list(mongo.db.food.find().sort('use_by_date', 1))
    return render_template("modifies.html", modifies=modifies)


@app.route("/shopping/<food_name>", methods=['GET', 'POST'])
def shopping(food_name):
    # get the item by id from the first collection
    food = mongo.db.food.find_one({"food_name": food_name})
    del food["_id"]
    mongo.db.shopping.insert_one(food),
    mongo.db.food.remove_one({"food": food_name })
    items = list(
        mongo.db.shopping.sort('shopping'))
    flash("Food Item added to Shopping List")
    return render_template("shopping.html", food=items)


if __name__ == "__main__":
    app.run(host=os.environ.get("IP"),
            port=int(os.environ.get("PORT")),
            debug=True)